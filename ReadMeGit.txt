start - step 01
----------------------------------------------
https://git-scm.com - установить git-scm

============================================================
start - step 02
----------------------------------------------
git --version

git - стартовая команда к git
	config --list (все настройки)

$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

--local (для конкретной рабочей папки)
============================================================
start - step 03 - репозитории на GitHub
----------------------------------------------
git clone https://github.com/itstepgomel/front21.git .(получить клон репозитория в текущую папку)
git remote show
git remote show origin

--------------------------------------------------------------
Изменить origin адрес репозитория можно двумя способами:

1) Первый способ задать url репозитория:

использовать команду git remote set-url origin ваш_адрес_репозитория
2) Второй способ:

Отредактировать файл .git/config: секция [remote "origin"] параметр - url
--------------------------------------------------------------
Команда git pull используется для извлечения и загрузки содержимого из удаленного репозитория и немедленного обновления локального репозитория этим содержимым.
--------------------------------------------------------------


start - step 04 - полезно
----------------------------------------------
git status (узнать текущее состояние git)
git branch (узнать текущую ветку)
git branch -a (узнать список всех веток)
git branch mds (создать ветку mds)
git checkout mds (перейти на ветку mds / можно переходить к комиту...)
===========================================================
Как откатить файл к состоянию в определённом коммите?
===========================================================
Это можно сделать с помощью команды git checkout, указав ей коммит, из которого мы хотим взять состояние файла.
Вводим команду git log и ищем нужный коммит. Копируем хэш коммита, пишем команду git checkout, вставляем хэш коммита и пишем название файла, который нужно откатить. Проверим статус.
Файл с изменениями проиндексирован.
Видим, что файл изменён и проиндексирован.
===========================================================
слияние веток:
1 - переходим на ветку куда всё сливается: git checkout master
2 - выполняем слияние с указанной веткой: git merge mds

-----------------------------------------
вариант с rebase:
1 - находимся в ветке КОТОРУЮ нужно влить: git checkout mds
2 - сливаем в указанную ветвь: git rebase master
============================================================
begin - step 01 - последовательность шагов
----------------------------------------------
git init (инициализация git, если будем выполнять clone то init НЕ нужен!)

git add . (добавить всё в git)

git commit -m "first commit" (закомитить)

git branch -M main (перейти на ветку main)
git branch mds (или перейти на ветку mds)

git remote add origin https://github.com/itstepgomel/front21.git (добавить всё в удалённый репозиторий используя параметры из origin)

git push -u origin main (сохранить добавленное в ветку main используя параметры из origin)
git push origin master (при сохранении должно появиться окно идентификации, если нету - Панель управление - Учётные записи пользователей - Управление учётными данными Windows - раздел "Общие учётные данные"... удалить учётную запись которая начинается с "Git...")
git push (сохранить с параметрами по умолчанию???
для этого
git push --set-upstream origin mds
)

git log (просмотреть комиты - управление через Enter - выход клавиша q / можно просмотреть конкретную ветку)

git diff 2f7654dd(покажи разницу между текущей точкой комита и...)
=====================================================
git subtree push --prefix public origin gh-pages (создать ветвь gh-pages и связать с ней папку public внутри репозитория, через содержимое которой будет работать статический сайт на Github.com)

=====================================================

Создание нового ключа SSH

1 - Откройте GIT Bash.

2 - Вставьте приведенный ниже текст, указав свой адрес электронной почты GitHub.

$ ssh-keygen


=====================================================

объяснение препода группе... :)
---------------------
1) Открываем редактор vs code выбираем папку на компе куда будет залит репозитарий.
2) Выбираем в Строке меню - терминал - создать терминал.
3) Смотрим в открытом терминале что путь папки правильный куда будет залит репозитарий.
// если нет глобальных настроек не забываем прописать
// git config --global user.name "John Doe" (свое имя)
// git config --global user.email johndoe@example.com (свой емейл)
//
4) Заходим на Гит Хаб выбираем свой репозитарий который надо клонировать.
5) Нажимаем на Зеленую кнопку Соde копируем ссылку https своего репозитория.
6) В vs code в терминале пишем команду git clone https://github.com/{name-account-github}/homework.git <- своего репо
7) Далее после клонирования проверяем путь правильности папки должно быть не куда клонировали а сама папка
чтоб перейти в консоле надо вести cd homework
должно быть типа D:\MY_Cotalog\IT_Step\front21\JS\homework>
8) Далее проверяем git status должно написать ветку и тд(только не ошибку)
9) Далее проверяем удаленные репозитории git remote show
должен быть origin
Проверяем git remote show origin покажет ваш репозитарий и данные о нем типа
  Fetch URL: https://github.com/{name-account-github}/homework.git
  Push  URL: https://github.com/{name-account-github}/homework.git
  HEAD branch: master
  Remote branches:
    conditionals tracked
    master       tracked
10) Добавляем репозиторий с которого будем обновляться (скачивать задания) itstep-prepod
Заходим в терминал и вводим команду git remote add prepod https://github.com/itstep-prepod/homework.git
Проверяем git remote show
выведет
origin
prepod
11) Проверяем ветки вводим команду git branch -a
смотрим
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/conditionals
  remotes/origin/master

  переходим на нужную нам вводим git checkout conditionals
  проверяем вводим >git branch
  * conditionals
  master
  (должны появится папки с фомилиями (проверяем папку TASKS задания))
  далее надо обновить свой репозитарий репозиторием prepod
12) Обновляем свой репозитарий скачая задания с репозитария prepod
Вводим команду git pull prepod master
(в папке TASKS должно будет появится задание)
Команда git pull работает как комбинация команд git fetch и git merge, т. е. Git вначале забирает изменения из указанного удалённого репозитория, а затем пытается слить их с текущей веткой.
13) Копируем задания затем заходим в свою папку и папку conditionals создаем task2.js и вставляем в виде комментариев задание.
Далее добавляем в index.html  <script src="task2.js"></script> !!!
14) Выполняем задания проверяем все и отступы в коде и все ;
15) После выполнения надо добавить это все сначала в локальный репозиторий
вводим команду git add .
проверяем git status (должно быть зеленым написано)
16) Потом комитем git commit -m "add file task2.js"
17) Далее пушим git push origin conditionals  (!!! внимательно смотрим ветку !!!)
18) Заходим в свой удаленный репозиторий на гит хаб выбираем ветку conditionals
и проверяем должно добавится все то что у вас на компе в папке и быть написан комит сбоку.
типа add file task2.js или что вы написали
19) Выбираем Contribute там нажимаем на Open pull request потом пишем комментарий и жмякаем на зеленую кнопку. (проверяем что стоить вверху стрелочки веток!)
20) Все Готово ждем подтверждения выполнения ))).
(чтоб замержилось после проверки в репозиторий itstep-prepod в главную ветку а потом по новой с 1 пункта)

ссылка на репозиторий препода - https://github.com/itstep-prepod/homework.git

thub.com/itstep-prepod/homework.git

